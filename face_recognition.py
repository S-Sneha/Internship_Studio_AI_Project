# -*- coding: utf-8 -*-
"""Implementation-of-PCA-with-ANN_algorithm-for-Face_Recognition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Sq4NfJ3kG__aQKr31aPbVV2aRuzIun46
"""

""" Implementation of Principal Component Analysis (PCA) with
Artificial Neural Network (ANN) algorithm for the Face Recognition """

# The Python code for this project is done in 'Google Colab'

# Numpy, Matplotlib, OpenCV, sklearn libraries are used
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.datasets import fetch_lfw_people
from sklearn.decomposition import PCA
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.neural_network import MLPClassifier
import numpy as np
import os,cv2

def plot_gallery(images, titles, h, w, n_row=3, n_col=4):
    """ Helper function to plot a gallery of portraits """
    plt.figure(figsize=(1.8 * n_col, 2.4 * n_row))
    plt.subplots_adjust(bottom=0, left=.01, right=.99, top=.90, hspace=.35)
    for i in range(n_row * n_col):
        plt.subplot(n_row, n_col, i + 1)
        plt.imshow(images[i].reshape((h, w)), cmap=plt.cm.gray)
        plt.title(titles[i], size=12)
        plt.xticks(())
        plt.yticks(())

""" The Faces of actors and actresses and Iris datasets are uploaded into Google
drive under content section in Google Colab"""

dir_name= "/content/drive/MyDrive/faces/"
y=[];X=[];target_names=[]
person_id=0;h=w=300
n_samples=0
class_names=[]
for person_name in os.listdir(dir_name):
    dir_path = dir_name+person_name+"/"
    class_names.append(person_name)
    for image_name in os.listdir(dir_path):
        # Formulating the image path (the actors facial images)
        image_path = dir_path+image_name
        # Read the input image using OpenCV library(cv2) function-imread()
        img = cv2.imread(image_path)
        # Convert the image into grayscale
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        # Resize image to 300*300 dimension
        resized_image= cv2.resize(gray,(h,w))
        # Convert matrix into vector (as column vector)
        v = resized_image.flatten()
        X.append(v)
        # Increase the number of samples
        n_samples =n_samples+1
        # Adding or appending the categorical label
        y.append(person_id)
        # Adding or appending the person name
        target_names.append(person_name)
    # Increment the person id by 1
    person_id=person_id+1

# Transform list to numpy array
y=np.array(y)
X=np.array(X)
target_names =np.array(target_names)
n_features = X.shape[1]
print(y.shape,X.shape,target_names.shape)
print("Number of sampels:",n_samples)

n_classes = target_names.shape[0]
print("Total dataset size:") #Printing the total dataset and number of samples
print("n_samples: %d" % n_samples)
print("n_features: %d" % n_features)
print("n_classes: %d" % n_classes)

"""Splitting dataset into a training set and a testing set using a
stratified k fold """

# split into a training and testing set
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.25, random_state=42)

# Compute a PCA (eigenfaces) on the face dataset
n_components = 150

print("Extracting the top %d eigenfaces from %d faces"% (n_components, X_train.shape[0]))

# Applying PCA
pca = PCA(n_components=n_components, svd_solver='randomized', whiten=True).fit(X_train)

# Generating the eigenfaces
eigenfaces = pca.components_.reshape((n_components, h, w))

# Plot the gallery of the most significative eigenfaces

eigenface_titles = ["eigenface %d" % i for i in range(eigenfaces.shape[0])]
plot_gallery(eigenfaces, eigenface_titles, h, w)

plt.show()

print("Projecting the input data on the eigenfaces orthonormal basis")
X_train_pca = pca.transform(X_train)
X_test_pca = pca.transform(X_test)
print(X_train_pca.shape,X_test_pca.shape)

# Compute Fisherfaces
lda = LinearDiscriminantAnalysis()
# Compute LDA of reduced data
lda.fit(X_train_pca, y_train)

X_train_lda = lda.transform(X_train_pca)
X_test_lda = lda.transform(X_test_pca)
print("The project implementation is done!!...")

# Apply ANN for training (multi-layer perceptron training)
clf = MLPClassifier(random_state=1, hidden_layer_sizes=(10, 10),max_iter=1000, verbose=True).fit(X_train_lda, y_train)
print("Model Weights:")
model_info = [coef.shape for coef in clf.coefs_]
print(model_info)

# Prediction on the test data
y_pred=[];y_prob=[]
for test_face in X_test_lda:
    prob = clf.predict_proba([test_face])[0]
    # print(prob,np.max(prob))
    class_id = np.where(prob == np.max(prob))[0][0]
    # Find the label of the mathed face
    y_pred.append(class_id)
    y_prob.append(np.max(prob))

# Transform the data
y_pred = np.array(y_pred)


prediction_titles=[]
true_positive = 0
for i in range(y_pred.shape[0]):
    true_name = class_names[y_test[i]]
    pred_name = class_names[y_pred[i]]
    result = 'pred: %s, pr: %s \ntrue: %s' % (pred_name, str(y_prob[i])[0:3], true_name)
    prediction_titles.append(result)
    if true_name==pred_name:
        true_positive =true_positive+1
# Printing the final classification accuracy
print("Accuracy:",true_positive*100/y_pred.shape[0])

# The class name with probability is displayed
plot_gallery(X_test, prediction_titles, h, w)
plt.show()

""" The python code of implementation for the project along with the output generated
by the model are uploaded into Artificial_intelligence_project folder as a single
file in Google drive and the link of the same is shared under
Project submission section """